VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "BracketOrders"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

'@================================================================================
' Description
'@================================================================================
'
'
'@================================================================================
' Amendment history
'@================================================================================
'
'
'
'

'@================================================================================
' Interfaces
'@================================================================================

Implements IEnumerable

'@================================================================================
' Events
'@================================================================================

Event CollectionChanged( _
                ev As CollectionChangeEventData)

'@================================================================================
' Constants
'@================================================================================

Private Const ModuleName                        As String = "BracketOrders"

'@================================================================================
' Enums
'@================================================================================

'@================================================================================
' Types
'@================================================================================

'@================================================================================
' Member variables
'@================================================================================

Private WithEvents mBracketOrders               As EnumerableCollection
Attribute mBracketOrders.VB_VarHelpID = -1

Private mCollectionChangeListeners              As New Listeners

'@================================================================================
' Class Event Handlers
'@================================================================================

Private Sub Class_Initialize()
Const ProcName As String = "Class_Initialize"
On Error GoTo Err

Set mBracketOrders = New EnumerableCollection

Exit Sub

Err:
GOrders.HandleUnexpectedError ProcName, ModuleName
End Sub

'@================================================================================
' IEnumerable Interface Members
'@================================================================================

Private Property Get IEnumerable_Enumerator() As Enumerator
Const ProcName As String = "IEnumerable_Enumerator"
On Error GoTo Err

Set IEnumerable_Enumerator = getEnumerator

Exit Property

Err:
GOrders.HandleUnexpectedError ProcName, ModuleName
End Property

Private Function IEnumerable_NextItem(Item As Variant, pCookie As Variant) As Boolean

End Function

Private Sub IEnumerable_Remove(pCookie As Variant)

End Sub

Private Function IEnumerable_Skip(ByVal numToSkip As Long, pCookie As Variant) As Boolean

End Function

Private Property Get IEnumerable_UpdateSequence() As Long

End Property

'@================================================================================
' mBracketOrders Event Handlers
'@================================================================================

Private Sub mBracketOrders_CollectionChanged(ev As CollectionChangeEventData)
Const ProcName As String = "mBracketOrders_CollectionChanged"
On Error GoTo Err

Set ev.Source = Me
fireCollectionChanged ev

Exit Sub

Err:
GOrders.NotifyUnhandledError ProcName, ModuleName
End Sub

'@================================================================================
' Properties
'@================================================================================

Public Property Get Count() As Long
Const ProcName As String = "Count"
On Error GoTo Err

Count = mBracketOrders.Count

Exit Property

Err:
GOrders.HandleUnexpectedError ProcName, ModuleName
End Property

'@================================================================================
' Methods
'@================================================================================

Public Function Add( _
                ByVal pBracketOrder As IBracketOrder) As IBracketOrder
Const ProcName As String = "Add"
On Error GoTo Err

Set Add = pBracketOrder
mBracketOrders.Add pBracketOrder, pBracketOrder.Key

Exit Function

Err:
GOrders.HandleUnexpectedError ProcName, ModuleName
End Function

Public Sub AddCollectionChangeListener( _
                ByVal pListener As ICollectionChangeListener)
Const ProcName As String = "AddCollectionChangeListener"
On Error GoTo Err

mCollectionChangeListeners.Add pListener

Exit Sub

Err:
GOrders.HandleUnexpectedError ProcName, ModuleName
End Sub

Public Sub Clear()
Const ProcName As String = "Clear"
On Error GoTo Err

mBracketOrders.Clear

Exit Sub

Err:
GOrders.HandleUnexpectedError ProcName, ModuleName
End Sub

Public Function Contains( _
                ByVal pIndex As Variant) As Boolean
Const ProcName As String = "Contains"
On Error GoTo Err

If IsObject(pIndex) Then
    If TypeOf pIndex Is IOrder Then
        Contains = findBracketOrderFromOrder(pIndex) Is Nothing
    ElseIf TypeOf pIndex Is IBracketOrder Then
        Dim lBo As IBracketOrder
        Set lBo = pIndex
        Contains = mBracketOrders.Contains(lBo.Key)
    End If
ElseIf VarType(pIndex) = vbString Then
    Contains = mBracketOrders.Contains(pIndex)
Else
    AssertArgument False, "Parameter must be the key of an IBracketOrder, an IBracketOrder object, or an IOrder whose owning IBracketOrder's presence is sought"
End If

Exit Function

Err:
GOrders.HandleUnexpectedError ProcName, ModuleName
End Function

Public Function Item( _
                ByVal pIndex As Variant) As IBracketOrder
Attribute Item.VB_UserMemId = 0
Const ProcName As String = "Item"
On Error GoTo Err

If IsObject(pIndex) Then
    If TypeOf pIndex Is IOrder Then
        Set Item = findBracketOrderFromOrder(pIndex)
    ElseIf TypeOf pIndex Is IBracketOrder Then
        Dim lBo As IBracketOrder
        Set lBo = pIndex
        Set Item = mBracketOrders(lBo.Key)
    End If
ElseIf VarType(pIndex) = vbString Then
    Set Item = mBracketOrders(pIndex)
Else
    AssertArgument False, "Parameter must be the key of an IBracketOrder, an IBracketOrder object, or an IOrder whose owning IBracketOrder is sought"
End If

Exit Function

Err:
GOrders.HandleUnexpectedError ProcName, ModuleName
End Function

Public Function NewEnum() As IUnknown
Attribute NewEnum.VB_UserMemId = -4
Attribute NewEnum.VB_MemberFlags = "40"
Set NewEnum = getEnumerator
End Function

Public Sub NotifyChange(pBracketOrder As IBracketOrder)
Const ProcName As String = "NotifyChange"
On Error GoTo Err

mBracketOrders.NotifyChange pBracketOrder.Key

Exit Sub

Err:
GOrders.HandleUnexpectedError ProcName, ModuleName
End Sub

Public Sub Remove( _
                ByVal pBracketOrder As IBracketOrder)
Const ProcName As String = "Remove"
On Error GoTo Err

mBracketOrders.Remove pBracketOrder.Key

Exit Sub

Err:
GOrders.HandleUnexpectedError ProcName, ModuleName
End Sub

Public Sub RemoveCollectionChangeListener(ByVal pListener As ICollectionChangeListener)
Const ProcName As String = "RemoveCollectionChangeListener"
On Error GoTo Err

mCollectionChangeListeners.Remove pListener

Exit Sub

Err:
GOrders.HandleUnexpectedError ProcName, ModuleName
End Sub

'@================================================================================
' Helper Functions
'@================================================================================

Private Function findBracketOrderFromOrder(ByVal pOrder As IOrder) As IBracketOrder
Const ProcName As String = "findBracketOrderFromOrder"
On Error GoTo Err

Dim lBracketOrder As IBracketOrder
For Each lBracketOrder In mBracketOrders
    If lBracketOrder.ContainsOrder(pOrder) Then
        Set findBracketOrderFromOrder = lBracketOrder
        Exit For
    End If
Next

Exit Function

Err:
GOrders.HandleUnexpectedError ProcName, ModuleName
End Function

Private Sub fireCollectionChanged(ev As CollectionChangeEventData)
Const ProcName As String = "fireCollectionChanged"
On Error GoTo Err

Static sInit As Boolean
Static sCurrentListeners() As Object
Static sSomeListeners As Boolean

If Not sInit Or Not mCollectionChangeListeners.Valid Then
    sInit = True
    sSomeListeners = mCollectionChangeListeners.GetCurrentListeners(sCurrentListeners)
End If
If sSomeListeners Then
    Dim lListener As ICollectionChangeListener
    Dim i As Long
    For i = 0 To UBound(sCurrentListeners)
        Set lListener = sCurrentListeners(i)
        lListener.Change ev
    Next
End If

RaiseEvent CollectionChanged(ev)

Exit Sub

Err:
GOrders.HandleUnexpectedError ProcName, ModuleName
End Sub

Private Function getEnumerator() As Enumerator
Const ProcName As String = "getEnumerator"
On Error GoTo Err

Set getEnumerator = mBracketOrders.Enumerator

Exit Function

Err:
GOrders.HandleUnexpectedError ProcName, ModuleName
End Function






